
A_PROJECT_2_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001144  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08001314  08001314  00002314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001580  08001580  00003058  2**0
                  CONTENTS
  4 .ARM          00000008  08001580  08001580  00002580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001588  08001588  00003058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08001590  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000058  080015e8  00003058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015e8  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001335  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000740  00000000  00000000  000043bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00004b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e6  00000000  00000000  00004c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cf85  00000000  00000000  00004d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029e9  00000000  00000000  00011ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004596d  00000000  00000000  000146b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005a021  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000830  00000000  00000000  0005a064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0005a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080012fc 	.word	0x080012fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	080012fc 	.word	0x080012fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <led_blinking_init>:
// Declare a volatile integer variable for controlling the LED blinking delay
volatile int led_blinking_delay = 1;

// Function to initialize the LED blinking setup
void led_blinking_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    // Enable the clock for GPIOA and GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <led_blinking_init+0x40>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <led_blinking_init+0x40>)
 80002ba:	f043 0305 	orr.w	r3, r3, #5
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA1 as output
    GPIOA->MODER &= ~(3 << (2*Led_Output_Pin_PA1)); // Reset the MODER bits for PA1
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <led_blinking_init+0x44>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <led_blinking_init+0x44>)
 80002c6:	f023 030c 	bic.w	r3, r3, #12
 80002ca:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (2*Led_Output_Pin_PA1));  // Set PA1 as output mode
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <led_blinking_init+0x44>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a08      	ldr	r2, [pc, #32]	@ (80002f4 <led_blinking_init+0x44>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]

    // Set PC13 as input
    GPIOC->MODER &= ~(3 << (2*Button_Input_Pin_PA13)); // Reset the MODER bits for PC13
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <led_blinking_init+0x48>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a06      	ldr	r2, [pc, #24]	@ (80002f8 <led_blinking_init+0x48>)
 80002de:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020000 	.word	0x40020000
 80002f8:	40020800 	.word	0x40020800

080002fc <led_blinking_start>:

// Function to start the LED blinking
void led_blinking_start(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	UART2_SendString("\n\rLed Blinking Starts\n\r");
 8000302:	482c      	ldr	r0, [pc, #176]	@ (80003b4 <led_blinking_start+0xb8>)
 8000304:	f000 faa8 	bl	8000858 <UART2_SendString>
	UART2_SendString("Led Blinking at delay speed ");
 8000308:	482b      	ldr	r0, [pc, #172]	@ (80003b8 <led_blinking_start+0xbc>)
 800030a:	f000 faa5 	bl	8000858 <UART2_SendString>
	UART2_SendChar((char)(led_blinking_delay + '0')); // Print the current delay value
 800030e:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <led_blinking_start+0xc0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	b2db      	uxtb	r3, r3
 8000314:	3330      	adds	r3, #48	@ 0x30
 8000316:	b2db      	uxtb	r3, r3
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fa85 	bl	8000828 <UART2_SendChar>
	UART2_SendString("x\n\r");
 800031e:	4828      	ldr	r0, [pc, #160]	@ (80003c0 <led_blinking_start+0xc4>)
 8000320:	f000 fa9a 	bl	8000858 <UART2_SendString>
    while (led_blinking_delay <= 5)  // Loop while the delay is less than or equal to 5
 8000324:	e03a      	b.n	800039c <led_blinking_start+0xa0>
    {
        GPIOA->ODR ^= (1 << 1);  // Toggle the LED connected to PA1
 8000326:	4b27      	ldr	r3, [pc, #156]	@ (80003c4 <led_blinking_start+0xc8>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a26      	ldr	r2, [pc, #152]	@ (80003c4 <led_blinking_start+0xc8>)
 800032c:	f083 0302 	eor.w	r3, r3, #2
 8000330:	6153      	str	r3, [r2, #20]
        for (int i = 0; i < (1000000 * led_blinking_delay); i++)  // Delay loop
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	e027      	b.n	8000388 <led_blinking_start+0x8c>
        {
            if (!(GPIOC->IDR & (1 << Button_Input_Pin_PA13)))  // Check if the button connected to PC13 is pressed
 8000338:	4b23      	ldr	r3, [pc, #140]	@ (80003c8 <led_blinking_start+0xcc>)
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d11e      	bne.n	8000382 <led_blinking_start+0x86>
            {
                led_blinking_delay += 1;  // Increment the delay
 8000344:	4b1d      	ldr	r3, [pc, #116]	@ (80003bc <led_blinking_start+0xc0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	4a1c      	ldr	r2, [pc, #112]	@ (80003bc <led_blinking_start+0xc0>)
 800034c:	6013      	str	r3, [r2, #0]
                if (led_blinking_delay >= 6)  // If the delay exceeds 6, break the loop
 800034e:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <led_blinking_start+0xc0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2b05      	cmp	r3, #5
 8000354:	dc21      	bgt.n	800039a <led_blinking_start+0x9e>
                {
                    break;
                }

                while (!(GPIOC->IDR & (1 << Button_Input_Pin_PA13)));  // Wait until the button is released
 8000356:	bf00      	nop
 8000358:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <led_blinking_start+0xcc>)
 800035a:	691b      	ldr	r3, [r3, #16]
 800035c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <led_blinking_start+0x5c>
                UART2_SendString("Led Blinking at delay speed ");
 8000364:	4814      	ldr	r0, [pc, #80]	@ (80003b8 <led_blinking_start+0xbc>)
 8000366:	f000 fa77 	bl	8000858 <UART2_SendString>
                UART2_SendChar((char)(led_blinking_delay + '0')); // Print the current delay value
 800036a:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <led_blinking_start+0xc0>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	3330      	adds	r3, #48	@ 0x30
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fa57 	bl	8000828 <UART2_SendChar>
                UART2_SendString("x\n\r");
 800037a:	4811      	ldr	r0, [pc, #68]	@ (80003c0 <led_blinking_start+0xc4>)
 800037c:	f000 fa6c 	bl	8000858 <UART2_SendString>
                break;
 8000380:	e00c      	b.n	800039c <led_blinking_start+0xa0>
        for (int i = 0; i < (1000000 * led_blinking_delay); i++)  // Delay loop
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3301      	adds	r3, #1
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <led_blinking_start+0xc0>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0f      	ldr	r2, [pc, #60]	@ (80003cc <led_blinking_start+0xd0>)
 800038e:	fb02 f303 	mul.w	r3, r2, r3
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	429a      	cmp	r2, r3
 8000396:	dbcf      	blt.n	8000338 <led_blinking_start+0x3c>
 8000398:	e000      	b.n	800039c <led_blinking_start+0xa0>
                    break;
 800039a:	bf00      	nop
    while (led_blinking_delay <= 5)  // Loop while the delay is less than or equal to 5
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <led_blinking_start+0xc0>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b05      	cmp	r3, #5
 80003a2:	ddc0      	ble.n	8000326 <led_blinking_start+0x2a>
            }
        }
    }
    led_blinking_delay = 1;  // Reset the delay to 1
 80003a4:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <led_blinking_start+0xc0>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	08001314 	.word	0x08001314
 80003b8:	0800132c 	.word	0x0800132c
 80003bc:	20000000 	.word	0x20000000
 80003c0:	0800134c 	.word	0x0800134c
 80003c4:	40020000 	.word	0x40020000
 80003c8:	40020800 	.word	0x40020800
 80003cc:	000f4240 	.word	0x000f4240

080003d0 <led_blinking_stop>:

// Function to stop the LED blinking
void led_blinking_stop(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(1 << 1);  // Turn off the LED connected to PA1
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <led_blinking_stop+0x1c>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <led_blinking_stop+0x1c>)
 80003da:	f023 0302 	bic.w	r3, r3, #2
 80003de:	6153      	str	r3, [r2, #20]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40020000 	.word	0x40020000

080003f0 <PWM_Intensity_init>:
#define Led_Output_Pin_PA0 0  // Define PA0 as the output pin for PWM
#define Button_Input_Pin_PC13 13 // Define PC13 as the input pin for the button

// Function to initialize PWM intensity control
void PWM_Intensity_init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
    // Configure the system clock using PLL settings
    clockSpeed_PLL();
 80003f4:	f000 f91a 	bl	800062c <clockSpeed_PLL>
    
    // Initialize SysTick timer
    SysTick_Init();
 80003f8:	f000 f988 	bl	800070c <SysTick_Init>
    
    // Enable clock for GPIOA and GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 80003fc:	4b20      	ldr	r3, [pc, #128]	@ (8000480 <PWM_Intensity_init+0x90>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000400:	4a1f      	ldr	r2, [pc, #124]	@ (8000480 <PWM_Intensity_init+0x90>)
 8000402:	f043 0305 	orr.w	r3, r3, #5
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
    
    // Configure PA0 for PWM output
    GPIOA->MODER &= ~(3 << (2 * Led_Output_Pin_PA0)); // Reset mode for PA0
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <PWM_Intensity_init+0x94>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a1d      	ldr	r2, [pc, #116]	@ (8000484 <PWM_Intensity_init+0x94>)
 800040e:	f023 0303 	bic.w	r3, r3, #3
 8000412:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (2 * Led_Output_Pin_PA0));  // Set PA0 to alternate function mode
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <PWM_Intensity_init+0x94>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a1a      	ldr	r2, [pc, #104]	@ (8000484 <PWM_Intensity_init+0x94>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << (4 * Led_Output_Pin_PA0)); // Set alternate function for PA0
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <PWM_Intensity_init+0x94>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	4a17      	ldr	r2, [pc, #92]	@ (8000484 <PWM_Intensity_init+0x94>)
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6213      	str	r3, [r2, #32]

    // Configure PC13 as input for button
    GPIOC->MODER &= ~(3 << (2 * Button_Input_Pin_PC13));
 800042c:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <PWM_Intensity_init+0x98>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a15      	ldr	r2, [pc, #84]	@ (8000488 <PWM_Intensity_init+0x98>)
 8000432:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000436:	6013      	str	r3, [r2, #0]
    
    // Enable clock for TIM2
    RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <PWM_Intensity_init+0x90>)
 800043a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800043c:	4a10      	ldr	r2, [pc, #64]	@ (8000480 <PWM_Intensity_init+0x90>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	6413      	str	r3, [r2, #64]	@ 0x40
    
    // Configure TIM2 for PWM
    TIM2->ARR = 100;               // Set auto-reload register to 100
 8000444:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000448:	2264      	movs	r2, #100	@ 0x64
 800044a:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCMR1 |= (1 << 5) | (1 << 6); // Set PWM mode 1 on channel 1
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000456:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800045a:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= (1 << 0);        // Enable capture/compare on channel 1
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	6a1b      	ldr	r3, [r3, #32]
 8000462:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= (1 << 0);         // Enable TIM2 counter
 800046c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40023800 	.word	0x40023800
 8000484:	40020000 	.word	0x40020000
 8000488:	40020800 	.word	0x40020800

0800048c <PWM_Intensity_start>:

// Function to start PWM intensity control
void PWM_Intensity_start(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
	char buffer[10];  // Buffer to hold string representations of numbers

	UART2_SendString("\n\rPWM Starts\n\r");
 8000492:	4829      	ldr	r0, [pc, #164]	@ (8000538 <PWM_Intensity_start+0xac>)
 8000494:	f000 f9e0 	bl	8000858 <UART2_SendString>
	UART2_SendString("Led glowing at ");
 8000498:	4828      	ldr	r0, [pc, #160]	@ (800053c <PWM_Intensity_start+0xb0>)
 800049a:	f000 f9dd 	bl	8000858 <UART2_SendString>
	sprintf(buffer, "%d", bright_pwm);  // Convert bright_pwm to string
 800049e:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <PWM_Intensity_start+0xb4>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4927      	ldr	r1, [pc, #156]	@ (8000544 <PWM_Intensity_start+0xb8>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fa90 	bl	80009cc <siprintf>
	UART2_SendString(buffer);  // Print the current PWM brightness value
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f9d2 	bl	8000858 <UART2_SendString>
	UART2_SendString("x intensity\n\r");
 80004b4:	4824      	ldr	r0, [pc, #144]	@ (8000548 <PWM_Intensity_start+0xbc>)
 80004b6:	f000 f9cf 	bl	8000858 <UART2_SendString>
	TIM2->CCR1 = bright_pwm;
 80004ba:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <PWM_Intensity_start+0xb4>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c2:	635a      	str	r2, [r3, #52]	@ 0x34
    while (bright_pwm <= 100)  // Loop while PWM brightness is less than or equal to 100
 80004c4:	e02b      	b.n	800051e <PWM_Intensity_start+0x92>
    {
        if (!(GPIOC->IDR & (1 << Button_Input_Pin_PC13)))  // Check if button (PC13) is pressed
 80004c6:	4b21      	ldr	r3, [pc, #132]	@ (800054c <PWM_Intensity_start+0xc0>)
 80004c8:	691b      	ldr	r3, [r3, #16]
 80004ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d125      	bne.n	800051e <PWM_Intensity_start+0x92>
        {

            TIM2->CCR1 = bright_pwm; // Set PWM duty cycle
 80004d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <PWM_Intensity_start+0xb4>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004da:	635a      	str	r2, [r3, #52]	@ 0x34
            bright_pwm += 10;       // Increase brightness
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <PWM_Intensity_start+0xb4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	330a      	adds	r3, #10
 80004e2:	4a17      	ldr	r2, [pc, #92]	@ (8000540 <PWM_Intensity_start+0xb4>)
 80004e4:	6013      	str	r3, [r2, #0]
            if (bright_pwm > 100)  // If brightness exceeds 100, exit loop
 80004e6:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <PWM_Intensity_start+0xb4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b64      	cmp	r3, #100	@ 0x64
 80004ec:	dc1c      	bgt.n	8000528 <PWM_Intensity_start+0x9c>
            {
                break;
            }
            while (!(GPIOC->IDR & (1 << Button_Input_Pin_PC13)));  // Wait until button is released
 80004ee:	bf00      	nop
 80004f0:	4b16      	ldr	r3, [pc, #88]	@ (800054c <PWM_Intensity_start+0xc0>)
 80004f2:	691b      	ldr	r3, [r3, #16]
 80004f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f9      	beq.n	80004f0 <PWM_Intensity_start+0x64>
            UART2_SendString("Led glowing at ");
 80004fc:	480f      	ldr	r0, [pc, #60]	@ (800053c <PWM_Intensity_start+0xb0>)
 80004fe:	f000 f9ab 	bl	8000858 <UART2_SendString>
            sprintf(buffer, "%d", bright_pwm);  // Convert bright_pwm to string
 8000502:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <PWM_Intensity_start+0xb4>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	490e      	ldr	r1, [pc, #56]	@ (8000544 <PWM_Intensity_start+0xb8>)
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fa5e 	bl	80009cc <siprintf>
            UART2_SendString(buffer);  // Print the current PWM brightness value
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f9a0 	bl	8000858 <UART2_SendString>
            UART2_SendString("x intensity\n\r");
 8000518:	480b      	ldr	r0, [pc, #44]	@ (8000548 <PWM_Intensity_start+0xbc>)
 800051a:	f000 f99d 	bl	8000858 <UART2_SendString>
    while (bright_pwm <= 100)  // Loop while PWM brightness is less than or equal to 100
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <PWM_Intensity_start+0xb4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b64      	cmp	r3, #100	@ 0x64
 8000524:	ddcf      	ble.n	80004c6 <PWM_Intensity_start+0x3a>
 8000526:	e000      	b.n	800052a <PWM_Intensity_start+0x9e>
                break;
 8000528:	bf00      	nop
        }
    }
    bright_pwm = 10;  // Reset brightness after loop
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <PWM_Intensity_start+0xb4>)
 800052c:	220a      	movs	r2, #10
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	08001350 	.word	0x08001350
 800053c:	08001360 	.word	0x08001360
 8000540:	20000004 	.word	0x20000004
 8000544:	08001370 	.word	0x08001370
 8000548:	08001374 	.word	0x08001374
 800054c:	40020800 	.word	0x40020800

08000550 <PWM_Intensity_close>:

// Function to stop PWM intensity control
void PWM_Intensity_close(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
    TIM2->CCR1 = 0;  // Set PWM duty cycle to 0 (turn off PWM)
 8000554:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000558:	2200      	movs	r2, #0
 800055a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <main>:
#include "case_2_pwm.h"     // Include PWM intensity functions

volatile uint8_t choice;    // Global variable to store user choice

int main()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    // Configure USART2 for communication
    Usart2_config();
 800056c:	f000 f98a 	bl	8000884 <Usart2_config>

    // Initialize LED blinking functionality
    led_blinking_init();
 8000570:	f7ff fe9e 	bl	80002b0 <led_blinking_init>

    // Initialize PWM intensity control
    PWM_Intensity_init();
 8000574:	f7ff ff3c 	bl	80003f0 <PWM_Intensity_init>

    while(1)  // Infinite loop to handle menu options
    {
        // Display available options to the user
        displayoption();
 8000578:	f000 f92c 	bl	80007d4 <displayoption>

        // Receive user choice from UART
        choice = receiverdata();
 800057c:	f000 f9e6 	bl	800094c <receiverdata>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <main+0xa4>)
 8000586:	701a      	strb	r2, [r3, #0]

        // Send the received choice back to the user
        UART2_SendString("\n\rYour choice is: ");
 8000588:	4821      	ldr	r0, [pc, #132]	@ (8000610 <main+0xa8>)
 800058a:	f000 f965 	bl	8000858 <UART2_SendString>
        UART2_SendChar(choice);
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <main+0xa4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f947 	bl	8000828 <UART2_SendChar>

        // Handle the user's choice
        switch(choice)
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <main+0xa4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b33      	cmp	r3, #51	@ 0x33
 80005a2:	d016      	beq.n	80005d2 <main+0x6a>
 80005a4:	2b33      	cmp	r3, #51	@ 0x33
 80005a6:	dc22      	bgt.n	80005ee <main+0x86>
 80005a8:	2b31      	cmp	r3, #49	@ 0x31
 80005aa:	d002      	beq.n	80005b2 <main+0x4a>
 80005ac:	2b32      	cmp	r3, #50	@ 0x32
 80005ae:	d008      	beq.n	80005c2 <main+0x5a>
 80005b0:	e01d      	b.n	80005ee <main+0x86>
        {
            case '1':
                // Start LED blinking and stop it after a certain condition
                led_blinking_start();
 80005b2:	f7ff fea3 	bl	80002fc <led_blinking_start>
                led_blinking_stop();
 80005b6:	f7ff ff0b 	bl	80003d0 <led_blinking_stop>
                UART2_SendString("\n\rCase 1 ends here\n\r");
 80005ba:	4816      	ldr	r0, [pc, #88]	@ (8000614 <main+0xac>)
 80005bc:	f000 f94c 	bl	8000858 <UART2_SendString>
                break;
 80005c0:	e019      	b.n	80005f6 <main+0x8e>

            case '2':
                // Start PWM intensity control and stop it after a certain condition
                PWM_Intensity_start();
 80005c2:	f7ff ff63 	bl	800048c <PWM_Intensity_start>
                PWM_Intensity_close();
 80005c6:	f7ff ffc3 	bl	8000550 <PWM_Intensity_close>
                UART2_SendString("\n\rCase 2 ends here\n\r");
 80005ca:	4813      	ldr	r0, [pc, #76]	@ (8000618 <main+0xb0>)
 80005cc:	f000 f944 	bl	8000858 <UART2_SendString>
                break;
 80005d0:	e011      	b.n	80005f6 <main+0x8e>

            case '3':
                // Stop LED blinking and PWM intensity control, then exit
                led_blinking_stop();
 80005d2:	f7ff fefd 	bl	80003d0 <led_blinking_stop>
                PWM_Intensity_close();
 80005d6:	f7ff ffbb 	bl	8000550 <PWM_Intensity_close>
                UART2_SendString("\n\rExiting the utility\n\r");
 80005da:	4810      	ldr	r0, [pc, #64]	@ (800061c <main+0xb4>)
 80005dc:	f000 f93c 	bl	8000858 <UART2_SendString>
            	UART2_SendString("\n\r      Thank You!! Visit Again\n\r");
 80005e0:	480f      	ldr	r0, [pc, #60]	@ (8000620 <main+0xb8>)
 80005e2:	f000 f939 	bl	8000858 <UART2_SendString>
            	UART2_SendString("\n\r------------------------------------\n\r");
 80005e6:	480f      	ldr	r0, [pc, #60]	@ (8000624 <main+0xbc>)
 80005e8:	f000 f936 	bl	8000858 <UART2_SendString>
                break;
 80005ec:	e003      	b.n	80005f6 <main+0x8e>

            default:
                // Handle invalid choices
                UART2_SendString("\n\rInvalid choice!! Enter a correct value\n\r");
 80005ee:	480e      	ldr	r0, [pc, #56]	@ (8000628 <main+0xc0>)
 80005f0:	f000 f932 	bl	8000858 <UART2_SendString>
                break;
 80005f4:	bf00      	nop
        }

        // Exit the loop if the user chooses option '3'
        if(choice == '3')
 80005f6:	4b05      	ldr	r3, [pc, #20]	@ (800060c <main+0xa4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b33      	cmp	r3, #51	@ 0x33
 80005fe:	d000      	beq.n	8000602 <main+0x9a>
        displayoption();
 8000600:	e7ba      	b.n	8000578 <main+0x10>
        {
            break;
 8000602:	bf00      	nop
        }
    }

    return 0; // Return 0 to indicate successful execution
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000074 	.word	0x20000074
 8000610:	08001384 	.word	0x08001384
 8000614:	08001398 	.word	0x08001398
 8000618:	080013b0 	.word	0x080013b0
 800061c:	080013c8 	.word	0x080013c8
 8000620:	080013e0 	.word	0x080013e0
 8000624:	08001404 	.word	0x08001404
 8000628:	08001430 	.word	0x08001430

0800062c <clockSpeed_PLL>:

#include "stm32f446xx.h"

#include "pll.h"

void clockSpeed_PLL(){
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

    RCC->CR |= RCC_CR_HSION;
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a31      	ldr	r2, [pc, #196]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 800063c:	bf00      	nop
 800063e:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f9      	beq.n	800063e <clockSpeed_PLL+0x12>

    RCC->PLLCFGR = (PLL_M) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24);
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <clockSpeed_PLL+0xd0>)
 800064c:	4a2c      	ldr	r2, [pc, #176]	@ (8000700 <clockSpeed_PLL+0xd4>)
 800064e:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLSRC;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	4a29      	ldr	r2, [pc, #164]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000656:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800065a:	6053      	str	r3, [r2, #4]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <clockSpeed_PLL+0xd0>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000662:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 8000666:	6093      	str	r3, [r2, #8]

    RCC->CR |= RCC_CR_PLLON;
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <clockSpeed_PLL+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a23      	ldr	r2, [pc, #140]	@ (80006fc <clockSpeed_PLL+0xd0>)
 800066e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000672:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000674:	bf00      	nop
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <clockSpeed_PLL+0x4a>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000686:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <clockSpeed_PLL+0xd0>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068c:	6413      	str	r3, [r2, #64]	@ 0x40
    
    PWR->CR |= PWR_CR_ODEN;
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <clockSpeed_PLL+0xd8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1c      	ldr	r2, [pc, #112]	@ (8000704 <clockSpeed_PLL+0xd8>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000698:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODRDY)) ;
 800069a:	bf00      	nop
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <clockSpeed_PLL+0xd8>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0f9      	beq.n	800069c <clockSpeed_PLL+0x70>
    
    PWR->CR |= PWR_CR_ODSWEN;
 80006a8:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <clockSpeed_PLL+0xd8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <clockSpeed_PLL+0xd8>)
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b2:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODSWRDY)) ;
 80006b4:	bf00      	nop
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <clockSpeed_PLL+0xd8>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f9      	beq.n	80006b6 <clockSpeed_PLL+0x8a>

    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <clockSpeed_PLL+0xdc>)
 80006c4:	f240 7205 	movw	r2, #1797	@ 0x705
 80006c8:	601a      	str	r2, [r3, #0]

    RCC->CFGR &=~ RCC_CFGR_SW;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <clockSpeed_PLL+0xd0>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4a0b      	ldr	r2, [pc, #44]	@ (80006fc <clockSpeed_PLL+0xd0>)
 80006d0:	f023 0303 	bic.w	r3, r3, #3
 80006d4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <clockSpeed_PLL+0xd0>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <clockSpeed_PLL+0xd0>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80006e2:	bf00      	nop
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <clockSpeed_PLL+0xd0>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f003 030c 	and.w	r3, r3, #12
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d1f9      	bne.n	80006e4 <clockSpeed_PLL+0xb8>
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800
 8000700:	02002d08 	.word	0x02002d08
 8000704:	40007000 	.word	0x40007000
 8000708:	40023c00 	.word	0x40023c00

0800070c <SysTick_Init>:

volatile uint32_t ms_counter = 0;  // Counter for delay management
volatile uint32_t millis = 0;      // Millisecond counter for timekeeping

// Function to initialize the SysTick timer
void SysTick_Init(){
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
    // Set SysTick timer value register to 0 (start counting from 0)
    SysTick->VAL = 0;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <SysTick_Init+0x20>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    
    // Set SysTick timer load value for 1 millisecond interval
    // HCLK_FREQ / 1000 gives the number of cycles per millisecond
    SysTick->LOAD = (HCLK_FREQ / 1000) - 1;
 8000716:	4b05      	ldr	r3, [pc, #20]	@ (800072c <SysTick_Init+0x20>)
 8000718:	4a05      	ldr	r2, [pc, #20]	@ (8000730 <SysTick_Init+0x24>)
 800071a:	605a      	str	r2, [r3, #4]
    
    // Configure SysTick:
    // - Use the processor clock as the clock source
    // - Enable SysTick interrupt
    // - Enable SysTick counter
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800071c:	4b03      	ldr	r3, [pc, #12]	@ (800072c <SysTick_Init+0x20>)
 800071e:	2207      	movs	r2, #7
 8000720:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e010 	.word	0xe000e010
 8000730:	0002bf1f 	.word	0x0002bf1f

08000734 <SysTick_Handler>:

// SysTick Handler function called every millisecond
void SysTick_Handler(){
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
    // Decrement ms_counter if it is greater than zero
    if (ms_counter) ms_counter--;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <SysTick_Handler+0x2c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <SysTick_Handler+0x16>
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <SysTick_Handler+0x2c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	3b01      	subs	r3, #1
 8000746:	4a06      	ldr	r2, [pc, #24]	@ (8000760 <SysTick_Handler+0x2c>)
 8000748:	6013      	str	r3, [r2, #0]
    
    // Increment millisecond counter
    millis++;
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <SysTick_Handler+0x30>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <SysTick_Handler+0x30>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000078 	.word	0x20000078
 8000764:	2000007c 	.word	0x2000007c

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000770:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <_sbrk+0x5c>)
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <_sbrk+0x60>)
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d102      	bne.n	800078a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <_sbrk+0x64>)
 8000786:	4a12      	ldr	r2, [pc, #72]	@ (80007d0 <_sbrk+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	693a      	ldr	r2, [r7, #16]
 8000794:	429a      	cmp	r2, r3
 8000796:	d207      	bcs.n	80007a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000798:	f000 f938 	bl	8000a0c <__errno>
 800079c:	4603      	mov	r3, r0
 800079e:	220c      	movs	r2, #12
 80007a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	e009      	b.n	80007bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ae:	4b07      	ldr	r3, [pc, #28]	@ (80007cc <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <_sbrk+0x64>)
 80007b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ba:	68fb      	ldr	r3, [r7, #12]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20020000 	.word	0x20020000
 80007c8:	00000400 	.word	0x00000400
 80007cc:	20000080 	.word	0x20000080
 80007d0:	200001d0 	.word	0x200001d0

080007d4 <displayoption>:
#define PA3_AF           (2 << 6)  // Alternate function mode for PA3
#define PA3_AF_USART2_RX (7 << 12) // USART2 RX alternate function for PA3

// Function to display menu options over UART
void displayoption(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	UART2_SendString("\n\r------------------------------------\n\r");
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <displayoption+0x38>)
 80007da:	f000 f83d 	bl	8000858 <UART2_SendString>
	UART2_SendString("\n\r    Embedded C: Project 2\n\r");
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <displayoption+0x3c>)
 80007e0:	f000 f83a 	bl	8000858 <UART2_SendString>
	UART2_SendString("\n\r------------------------------------\n\r");
 80007e4:	4809      	ldr	r0, [pc, #36]	@ (800080c <displayoption+0x38>)
 80007e6:	f000 f837 	bl	8000858 <UART2_SendString>
	UART2_SendString("\n\rMenu:\n\r");
 80007ea:	480a      	ldr	r0, [pc, #40]	@ (8000814 <displayoption+0x40>)
 80007ec:	f000 f834 	bl	8000858 <UART2_SendString>
	UART2_SendString("1. Led Blinking with 5 different delays \n\r");
 80007f0:	4809      	ldr	r0, [pc, #36]	@ (8000818 <displayoption+0x44>)
 80007f2:	f000 f831 	bl	8000858 <UART2_SendString>
	UART2_SendString("2. Invoking a PWM and varying intensity of led\n\r");
 80007f6:	4809      	ldr	r0, [pc, #36]	@ (800081c <displayoption+0x48>)
 80007f8:	f000 f82e 	bl	8000858 <UART2_SendString>
	UART2_SendString("3. Exiting the utility\n\r");
 80007fc:	4808      	ldr	r0, [pc, #32]	@ (8000820 <displayoption+0x4c>)
 80007fe:	f000 f82b 	bl	8000858 <UART2_SendString>
	UART2_SendString("\n\rEnter your choice(1-3): ");
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <displayoption+0x50>)
 8000804:	f000 f828 	bl	8000858 <UART2_SendString>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	0800145c 	.word	0x0800145c
 8000810:	08001488 	.word	0x08001488
 8000814:	080014a8 	.word	0x080014a8
 8000818:	080014b4 	.word	0x080014b4
 800081c:	080014e0 	.word	0x080014e0
 8000820:	08001514 	.word	0x08001514
 8000824:	08001530 	.word	0x08001530

08000828 <UART2_SendChar>:

// Function to send a single character over UART2
void UART2_SendChar(char ch)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	USART2->DR = ch; // Load the data register with the character
 8000832:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <UART2_SendChar+0x2c>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & USART_SR_TXE)); // Wait until the transmit data register is empty
 8000838:	bf00      	nop
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <UART2_SendChar+0x2c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <UART2_SendChar+0x12>
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40004400 	.word	0x40004400

08000858 <UART2_SendString>:

// Function to send a string over UART2
void UART2_SendString(char *string)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	while(*string != '\0')
 8000860:	e007      	b.n	8000872 <UART2_SendString+0x1a>
	{
		UART2_SendChar(*string); // Send each character of the string
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffde 	bl	8000828 <UART2_SendChar>
		string++;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
	while(*string != '\0')
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f3      	bne.n	8000862 <UART2_SendString+0xa>
	}
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <Usart2_config>:

// Function to configure USART2
void Usart2_config(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	// Enable the clocks for GPIOA and USART2
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable GPIOA clock
 8000888:	4b2d      	ldr	r3, [pc, #180]	@ (8000940 <Usart2_config+0xbc>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088c:	4a2c      	ldr	r2, [pc, #176]	@ (8000940 <Usart2_config+0xbc>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 8000894:	4b2a      	ldr	r3, [pc, #168]	@ (8000940 <Usart2_config+0xbc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a29      	ldr	r2, [pc, #164]	@ (8000940 <Usart2_config+0xbc>)
 800089a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PA2 and PA3 for alternate function (USART2 TX/RX)
	GPIOA->MODER |= PA2_AF;  // Set PA2 to alternate function mode
 80008a0:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <Usart2_config+0xc0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <Usart2_config+0xc0>)
 80008a6:	f043 0320 	orr.w	r3, r3, #32
 80008aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= PA3_AF;  // Set PA3 to alternate function mode
 80008ac:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <Usart2_config+0xc0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a24      	ldr	r2, [pc, #144]	@ (8000944 <Usart2_config+0xc0>)
 80008b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b6:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (3 << 4); // Set high speed for PA2
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <Usart2_config+0xc0>)
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	4a21      	ldr	r2, [pc, #132]	@ (8000944 <Usart2_config+0xc0>)
 80008be:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80008c2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (3 << 6); // Set high speed for PA3
 80008c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <Usart2_config+0xc0>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	4a1e      	ldr	r2, [pc, #120]	@ (8000944 <Usart2_config+0xc0>)
 80008ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80008ce:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= PA2_AF_USART2_TX; // Set alternate function for PA2 as USART2 TX
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <Usart2_config+0xc0>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <Usart2_config+0xc0>)
 80008d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80008da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= PA3_AF_USART2_RX; // Set alternate function for PA3 as USART2 RX
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <Usart2_config+0xc0>)
 80008de:	6a1b      	ldr	r3, [r3, #32]
 80008e0:	4a18      	ldr	r2, [pc, #96]	@ (8000944 <Usart2_config+0xc0>)
 80008e2:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80008e6:	6213      	str	r3, [r2, #32]

	USART2->CR1 = 0x00; // Clear all settings in CR1
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <Usart2_config+0xc4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE; // Enable USART2
 80008ee:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <Usart2_config+0xc4>)
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <Usart2_config+0xc4>)
 80008f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008f8:	60d3      	str	r3, [r2, #12]

	USART2->CR1 &= ~(1 << 12); // Set word length to 8 bits
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <Usart2_config+0xc4>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <Usart2_config+0xc4>)
 8000900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000904:	60d3      	str	r3, [r2, #12]

	USART2->BRR |= (1 << 0); // Set baud rate mantissa
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <Usart2_config+0xc4>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <Usart2_config+0xc4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6093      	str	r3, [r2, #8]
	USART2->BRR |= (24 << 4); // Set baud rate fraction
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <Usart2_config+0xc4>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <Usart2_config+0xc4>)
 8000918:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800091c:	6093      	str	r3, [r2, #8]

	USART2->CR1 |= USART_CR1_RE; // Enable receiver
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <Usart2_config+0xc4>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <Usart2_config+0xc4>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_TE; // Enable transmitter
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <Usart2_config+0xc4>)
 800092c:	68db      	ldr	r3, [r3, #12]
 800092e:	4a06      	ldr	r2, [pc, #24]	@ (8000948 <Usart2_config+0xc4>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	60d3      	str	r3, [r2, #12]
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000
 8000948:	40004400 	.word	0x40004400

0800094c <receiverdata>:

// Function to receive data from UART2
uint8_t receiverdata(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
	while(!(USART2->SR & USART_SR_RXNE)); // Wait until data is received
 8000952:	bf00      	nop
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <receiverdata+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f003 0320 	and.w	r3, r3, #32
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <receiverdata+0x8>
	uint8_t data = USART2->DR; // Read the received data
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <receiverdata+0x28>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	71fb      	strb	r3, [r7, #7]
	return data; // Return the received data
 8000966:	79fb      	ldrb	r3, [r7, #7]
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40004400 	.word	0x40004400

08000978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	@ (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a6:	f000 f837 	bl	8000a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fddd 	bl	8000568 <main>

080009ae <LoopForever>:

LoopForever:
  b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   r0, =_estack
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80009bc:	08001590 	.word	0x08001590
  ldr r2, =_sbss
 80009c0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80009c4:	200001cc 	.word	0x200001cc

080009c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <siprintf>:
 80009cc:	b40e      	push	{r1, r2, r3}
 80009ce:	b500      	push	{lr}
 80009d0:	b09c      	sub	sp, #112	@ 0x70
 80009d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80009d4:	9002      	str	r0, [sp, #8]
 80009d6:	9006      	str	r0, [sp, #24]
 80009d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <siprintf+0x38>)
 80009de:	9107      	str	r1, [sp, #28]
 80009e0:	9104      	str	r1, [sp, #16]
 80009e2:	4909      	ldr	r1, [pc, #36]	@ (8000a08 <siprintf+0x3c>)
 80009e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80009e8:	9105      	str	r1, [sp, #20]
 80009ea:	6800      	ldr	r0, [r0, #0]
 80009ec:	9301      	str	r3, [sp, #4]
 80009ee:	a902      	add	r1, sp, #8
 80009f0:	f000 f98c 	bl	8000d0c <_svfiprintf_r>
 80009f4:	9b02      	ldr	r3, [sp, #8]
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	b01c      	add	sp, #112	@ 0x70
 80009fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a00:	b003      	add	sp, #12
 8000a02:	4770      	bx	lr
 8000a04:	20000008 	.word	0x20000008
 8000a08:	ffff0208 	.word	0xffff0208

08000a0c <__errno>:
 8000a0c:	4b01      	ldr	r3, [pc, #4]	@ (8000a14 <__errno+0x8>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008

08000a18 <__libc_init_array>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a50 <__libc_init_array+0x38>)
 8000a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a54 <__libc_init_array+0x3c>)
 8000a1e:	1b64      	subs	r4, r4, r5
 8000a20:	10a4      	asrs	r4, r4, #2
 8000a22:	2600      	movs	r6, #0
 8000a24:	42a6      	cmp	r6, r4
 8000a26:	d109      	bne.n	8000a3c <__libc_init_array+0x24>
 8000a28:	4d0b      	ldr	r5, [pc, #44]	@ (8000a58 <__libc_init_array+0x40>)
 8000a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a5c <__libc_init_array+0x44>)
 8000a2c:	f000 fc66 	bl	80012fc <_init>
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	10a4      	asrs	r4, r4, #2
 8000a34:	2600      	movs	r6, #0
 8000a36:	42a6      	cmp	r6, r4
 8000a38:	d105      	bne.n	8000a46 <__libc_init_array+0x2e>
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a40:	4798      	blx	r3
 8000a42:	3601      	adds	r6, #1
 8000a44:	e7ee      	b.n	8000a24 <__libc_init_array+0xc>
 8000a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a4a:	4798      	blx	r3
 8000a4c:	3601      	adds	r6, #1
 8000a4e:	e7f2      	b.n	8000a36 <__libc_init_array+0x1e>
 8000a50:	08001588 	.word	0x08001588
 8000a54:	08001588 	.word	0x08001588
 8000a58:	08001588 	.word	0x08001588
 8000a5c:	0800158c 	.word	0x0800158c

08000a60 <__retarget_lock_acquire_recursive>:
 8000a60:	4770      	bx	lr

08000a62 <__retarget_lock_release_recursive>:
 8000a62:	4770      	bx	lr

08000a64 <_free_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4605      	mov	r5, r0
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d041      	beq.n	8000af0 <_free_r+0x8c>
 8000a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a70:	1f0c      	subs	r4, r1, #4
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bfb8      	it	lt
 8000a76:	18e4      	addlt	r4, r4, r3
 8000a78:	f000 f8e0 	bl	8000c3c <__malloc_lock>
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <_free_r+0x90>)
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	b933      	cbnz	r3, 8000a90 <_free_r+0x2c>
 8000a82:	6063      	str	r3, [r4, #4]
 8000a84:	6014      	str	r4, [r2, #0]
 8000a86:	4628      	mov	r0, r5
 8000a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a8c:	f000 b8dc 	b.w	8000c48 <__malloc_unlock>
 8000a90:	42a3      	cmp	r3, r4
 8000a92:	d908      	bls.n	8000aa6 <_free_r+0x42>
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	1821      	adds	r1, r4, r0
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	bf01      	itttt	eq
 8000a9c:	6819      	ldreq	r1, [r3, #0]
 8000a9e:	685b      	ldreq	r3, [r3, #4]
 8000aa0:	1809      	addeq	r1, r1, r0
 8000aa2:	6021      	streq	r1, [r4, #0]
 8000aa4:	e7ed      	b.n	8000a82 <_free_r+0x1e>
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	b10b      	cbz	r3, 8000ab0 <_free_r+0x4c>
 8000aac:	42a3      	cmp	r3, r4
 8000aae:	d9fa      	bls.n	8000aa6 <_free_r+0x42>
 8000ab0:	6811      	ldr	r1, [r2, #0]
 8000ab2:	1850      	adds	r0, r2, r1
 8000ab4:	42a0      	cmp	r0, r4
 8000ab6:	d10b      	bne.n	8000ad0 <_free_r+0x6c>
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	4401      	add	r1, r0
 8000abc:	1850      	adds	r0, r2, r1
 8000abe:	4283      	cmp	r3, r0
 8000ac0:	6011      	str	r1, [r2, #0]
 8000ac2:	d1e0      	bne.n	8000a86 <_free_r+0x22>
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	6053      	str	r3, [r2, #4]
 8000aca:	4408      	add	r0, r1
 8000acc:	6010      	str	r0, [r2, #0]
 8000ace:	e7da      	b.n	8000a86 <_free_r+0x22>
 8000ad0:	d902      	bls.n	8000ad8 <_free_r+0x74>
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	602b      	str	r3, [r5, #0]
 8000ad6:	e7d6      	b.n	8000a86 <_free_r+0x22>
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	1821      	adds	r1, r4, r0
 8000adc:	428b      	cmp	r3, r1
 8000ade:	bf04      	itt	eq
 8000ae0:	6819      	ldreq	r1, [r3, #0]
 8000ae2:	685b      	ldreq	r3, [r3, #4]
 8000ae4:	6063      	str	r3, [r4, #4]
 8000ae6:	bf04      	itt	eq
 8000ae8:	1809      	addeq	r1, r1, r0
 8000aea:	6021      	streq	r1, [r4, #0]
 8000aec:	6054      	str	r4, [r2, #4]
 8000aee:	e7ca      	b.n	8000a86 <_free_r+0x22>
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop
 8000af4:	200001c8 	.word	0x200001c8

08000af8 <sbrk_aligned>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	4e0f      	ldr	r6, [pc, #60]	@ (8000b38 <sbrk_aligned+0x40>)
 8000afc:	460c      	mov	r4, r1
 8000afe:	6831      	ldr	r1, [r6, #0]
 8000b00:	4605      	mov	r5, r0
 8000b02:	b911      	cbnz	r1, 8000b0a <sbrk_aligned+0x12>
 8000b04:	f000 fba6 	bl	8001254 <_sbrk_r>
 8000b08:	6030      	str	r0, [r6, #0]
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 fba1 	bl	8001254 <_sbrk_r>
 8000b12:	1c43      	adds	r3, r0, #1
 8000b14:	d103      	bne.n	8000b1e <sbrk_aligned+0x26>
 8000b16:	f04f 34ff 	mov.w	r4, #4294967295
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	1cc4      	adds	r4, r0, #3
 8000b20:	f024 0403 	bic.w	r4, r4, #3
 8000b24:	42a0      	cmp	r0, r4
 8000b26:	d0f8      	beq.n	8000b1a <sbrk_aligned+0x22>
 8000b28:	1a21      	subs	r1, r4, r0
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	f000 fb92 	bl	8001254 <_sbrk_r>
 8000b30:	3001      	adds	r0, #1
 8000b32:	d1f2      	bne.n	8000b1a <sbrk_aligned+0x22>
 8000b34:	e7ef      	b.n	8000b16 <sbrk_aligned+0x1e>
 8000b36:	bf00      	nop
 8000b38:	200001c4 	.word	0x200001c4

08000b3c <_malloc_r>:
 8000b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b40:	1ccd      	adds	r5, r1, #3
 8000b42:	f025 0503 	bic.w	r5, r5, #3
 8000b46:	3508      	adds	r5, #8
 8000b48:	2d0c      	cmp	r5, #12
 8000b4a:	bf38      	it	cc
 8000b4c:	250c      	movcc	r5, #12
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	4606      	mov	r6, r0
 8000b52:	db01      	blt.n	8000b58 <_malloc_r+0x1c>
 8000b54:	42a9      	cmp	r1, r5
 8000b56:	d904      	bls.n	8000b62 <_malloc_r+0x26>
 8000b58:	230c      	movs	r3, #12
 8000b5a:	6033      	str	r3, [r6, #0]
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c38 <_malloc_r+0xfc>
 8000b66:	f000 f869 	bl	8000c3c <__malloc_lock>
 8000b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6e:	461c      	mov	r4, r3
 8000b70:	bb44      	cbnz	r4, 8000bc4 <_malloc_r+0x88>
 8000b72:	4629      	mov	r1, r5
 8000b74:	4630      	mov	r0, r6
 8000b76:	f7ff ffbf 	bl	8000af8 <sbrk_aligned>
 8000b7a:	1c43      	adds	r3, r0, #1
 8000b7c:	4604      	mov	r4, r0
 8000b7e:	d158      	bne.n	8000c32 <_malloc_r+0xf6>
 8000b80:	f8d8 4000 	ldr.w	r4, [r8]
 8000b84:	4627      	mov	r7, r4
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d143      	bne.n	8000c12 <_malloc_r+0xd6>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d04b      	beq.n	8000c26 <_malloc_r+0xea>
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	4639      	mov	r1, r7
 8000b92:	4630      	mov	r0, r6
 8000b94:	eb04 0903 	add.w	r9, r4, r3
 8000b98:	f000 fb5c 	bl	8001254 <_sbrk_r>
 8000b9c:	4581      	cmp	r9, r0
 8000b9e:	d142      	bne.n	8000c26 <_malloc_r+0xea>
 8000ba0:	6821      	ldr	r1, [r4, #0]
 8000ba2:	1a6d      	subs	r5, r5, r1
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f7ff ffa6 	bl	8000af8 <sbrk_aligned>
 8000bac:	3001      	adds	r0, #1
 8000bae:	d03a      	beq.n	8000c26 <_malloc_r+0xea>
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	442b      	add	r3, r5
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	bb62      	cbnz	r2, 8000c18 <_malloc_r+0xdc>
 8000bbe:	f8c8 7000 	str.w	r7, [r8]
 8000bc2:	e00f      	b.n	8000be4 <_malloc_r+0xa8>
 8000bc4:	6822      	ldr	r2, [r4, #0]
 8000bc6:	1b52      	subs	r2, r2, r5
 8000bc8:	d420      	bmi.n	8000c0c <_malloc_r+0xd0>
 8000bca:	2a0b      	cmp	r2, #11
 8000bcc:	d917      	bls.n	8000bfe <_malloc_r+0xc2>
 8000bce:	1961      	adds	r1, r4, r5
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	6025      	str	r5, [r4, #0]
 8000bd4:	bf18      	it	ne
 8000bd6:	6059      	strne	r1, [r3, #4]
 8000bd8:	6863      	ldr	r3, [r4, #4]
 8000bda:	bf08      	it	eq
 8000bdc:	f8c8 1000 	streq.w	r1, [r8]
 8000be0:	5162      	str	r2, [r4, r5]
 8000be2:	604b      	str	r3, [r1, #4]
 8000be4:	4630      	mov	r0, r6
 8000be6:	f000 f82f 	bl	8000c48 <__malloc_unlock>
 8000bea:	f104 000b 	add.w	r0, r4, #11
 8000bee:	1d23      	adds	r3, r4, #4
 8000bf0:	f020 0007 	bic.w	r0, r0, #7
 8000bf4:	1ac2      	subs	r2, r0, r3
 8000bf6:	bf1c      	itt	ne
 8000bf8:	1a1b      	subne	r3, r3, r0
 8000bfa:	50a3      	strne	r3, [r4, r2]
 8000bfc:	e7af      	b.n	8000b5e <_malloc_r+0x22>
 8000bfe:	6862      	ldr	r2, [r4, #4]
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	bf0c      	ite	eq
 8000c04:	f8c8 2000 	streq.w	r2, [r8]
 8000c08:	605a      	strne	r2, [r3, #4]
 8000c0a:	e7eb      	b.n	8000be4 <_malloc_r+0xa8>
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	6864      	ldr	r4, [r4, #4]
 8000c10:	e7ae      	b.n	8000b70 <_malloc_r+0x34>
 8000c12:	463c      	mov	r4, r7
 8000c14:	687f      	ldr	r7, [r7, #4]
 8000c16:	e7b6      	b.n	8000b86 <_malloc_r+0x4a>
 8000c18:	461a      	mov	r2, r3
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	d1fb      	bne.n	8000c18 <_malloc_r+0xdc>
 8000c20:	2300      	movs	r3, #0
 8000c22:	6053      	str	r3, [r2, #4]
 8000c24:	e7de      	b.n	8000be4 <_malloc_r+0xa8>
 8000c26:	230c      	movs	r3, #12
 8000c28:	6033      	str	r3, [r6, #0]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f000 f80c 	bl	8000c48 <__malloc_unlock>
 8000c30:	e794      	b.n	8000b5c <_malloc_r+0x20>
 8000c32:	6005      	str	r5, [r0, #0]
 8000c34:	e7d6      	b.n	8000be4 <_malloc_r+0xa8>
 8000c36:	bf00      	nop
 8000c38:	200001c8 	.word	0x200001c8

08000c3c <__malloc_lock>:
 8000c3c:	4801      	ldr	r0, [pc, #4]	@ (8000c44 <__malloc_lock+0x8>)
 8000c3e:	f7ff bf0f 	b.w	8000a60 <__retarget_lock_acquire_recursive>
 8000c42:	bf00      	nop
 8000c44:	200001c0 	.word	0x200001c0

08000c48 <__malloc_unlock>:
 8000c48:	4801      	ldr	r0, [pc, #4]	@ (8000c50 <__malloc_unlock+0x8>)
 8000c4a:	f7ff bf0a 	b.w	8000a62 <__retarget_lock_release_recursive>
 8000c4e:	bf00      	nop
 8000c50:	200001c0 	.word	0x200001c0

08000c54 <__ssputs_r>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	688e      	ldr	r6, [r1, #8]
 8000c5a:	461f      	mov	r7, r3
 8000c5c:	42be      	cmp	r6, r7
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	4682      	mov	sl, r0
 8000c62:	460c      	mov	r4, r1
 8000c64:	4690      	mov	r8, r2
 8000c66:	d82d      	bhi.n	8000cc4 <__ssputs_r+0x70>
 8000c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000c70:	d026      	beq.n	8000cc0 <__ssputs_r+0x6c>
 8000c72:	6965      	ldr	r5, [r4, #20]
 8000c74:	6909      	ldr	r1, [r1, #16]
 8000c76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c7a:	eba3 0901 	sub.w	r9, r3, r1
 8000c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c82:	1c7b      	adds	r3, r7, #1
 8000c84:	444b      	add	r3, r9
 8000c86:	106d      	asrs	r5, r5, #1
 8000c88:	429d      	cmp	r5, r3
 8000c8a:	bf38      	it	cc
 8000c8c:	461d      	movcc	r5, r3
 8000c8e:	0553      	lsls	r3, r2, #21
 8000c90:	d527      	bpl.n	8000ce2 <__ssputs_r+0x8e>
 8000c92:	4629      	mov	r1, r5
 8000c94:	f7ff ff52 	bl	8000b3c <_malloc_r>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	b360      	cbz	r0, 8000cf6 <__ssputs_r+0xa2>
 8000c9c:	6921      	ldr	r1, [r4, #16]
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	f000 fae8 	bl	8001274 <memcpy>
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cae:	81a3      	strh	r3, [r4, #12]
 8000cb0:	6126      	str	r6, [r4, #16]
 8000cb2:	6165      	str	r5, [r4, #20]
 8000cb4:	444e      	add	r6, r9
 8000cb6:	eba5 0509 	sub.w	r5, r5, r9
 8000cba:	6026      	str	r6, [r4, #0]
 8000cbc:	60a5      	str	r5, [r4, #8]
 8000cbe:	463e      	mov	r6, r7
 8000cc0:	42be      	cmp	r6, r7
 8000cc2:	d900      	bls.n	8000cc6 <__ssputs_r+0x72>
 8000cc4:	463e      	mov	r6, r7
 8000cc6:	6820      	ldr	r0, [r4, #0]
 8000cc8:	4632      	mov	r2, r6
 8000cca:	4641      	mov	r1, r8
 8000ccc:	f000 faa8 	bl	8001220 <memmove>
 8000cd0:	68a3      	ldr	r3, [r4, #8]
 8000cd2:	1b9b      	subs	r3, r3, r6
 8000cd4:	60a3      	str	r3, [r4, #8]
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	4433      	add	r3, r6
 8000cda:	6023      	str	r3, [r4, #0]
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	462a      	mov	r2, r5
 8000ce4:	f000 fad4 	bl	8001290 <_realloc_r>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d1e0      	bne.n	8000cb0 <__ssputs_r+0x5c>
 8000cee:	6921      	ldr	r1, [r4, #16]
 8000cf0:	4650      	mov	r0, sl
 8000cf2:	f7ff feb7 	bl	8000a64 <_free_r>
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	f8ca 3000 	str.w	r3, [sl]
 8000cfc:	89a3      	ldrh	r3, [r4, #12]
 8000cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d02:	81a3      	strh	r3, [r4, #12]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	e7e9      	b.n	8000cde <__ssputs_r+0x8a>
	...

08000d0c <_svfiprintf_r>:
 8000d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d10:	4698      	mov	r8, r3
 8000d12:	898b      	ldrh	r3, [r1, #12]
 8000d14:	061b      	lsls	r3, r3, #24
 8000d16:	b09d      	sub	sp, #116	@ 0x74
 8000d18:	4607      	mov	r7, r0
 8000d1a:	460d      	mov	r5, r1
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	d510      	bpl.n	8000d42 <_svfiprintf_r+0x36>
 8000d20:	690b      	ldr	r3, [r1, #16]
 8000d22:	b973      	cbnz	r3, 8000d42 <_svfiprintf_r+0x36>
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	f7ff ff09 	bl	8000b3c <_malloc_r>
 8000d2a:	6028      	str	r0, [r5, #0]
 8000d2c:	6128      	str	r0, [r5, #16]
 8000d2e:	b930      	cbnz	r0, 8000d3e <_svfiprintf_r+0x32>
 8000d30:	230c      	movs	r3, #12
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	b01d      	add	sp, #116	@ 0x74
 8000d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3e:	2340      	movs	r3, #64	@ 0x40
 8000d40:	616b      	str	r3, [r5, #20]
 8000d42:	2300      	movs	r3, #0
 8000d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d46:	2320      	movs	r3, #32
 8000d48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d50:	2330      	movs	r3, #48	@ 0x30
 8000d52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000ef0 <_svfiprintf_r+0x1e4>
 8000d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d5a:	f04f 0901 	mov.w	r9, #1
 8000d5e:	4623      	mov	r3, r4
 8000d60:	469a      	mov	sl, r3
 8000d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d66:	b10a      	cbz	r2, 8000d6c <_svfiprintf_r+0x60>
 8000d68:	2a25      	cmp	r2, #37	@ 0x25
 8000d6a:	d1f9      	bne.n	8000d60 <_svfiprintf_r+0x54>
 8000d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8000d70:	d00b      	beq.n	8000d8a <_svfiprintf_r+0x7e>
 8000d72:	465b      	mov	r3, fp
 8000d74:	4622      	mov	r2, r4
 8000d76:	4629      	mov	r1, r5
 8000d78:	4638      	mov	r0, r7
 8000d7a:	f7ff ff6b 	bl	8000c54 <__ssputs_r>
 8000d7e:	3001      	adds	r0, #1
 8000d80:	f000 80a7 	beq.w	8000ed2 <_svfiprintf_r+0x1c6>
 8000d84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d86:	445a      	add	r2, fp
 8000d88:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 809f 	beq.w	8000ed2 <_svfiprintf_r+0x1c6>
 8000d94:	2300      	movs	r3, #0
 8000d96:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d9e:	f10a 0a01 	add.w	sl, sl, #1
 8000da2:	9304      	str	r3, [sp, #16]
 8000da4:	9307      	str	r3, [sp, #28]
 8000da6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000daa:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dac:	4654      	mov	r4, sl
 8000dae:	2205      	movs	r2, #5
 8000db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000db4:	484e      	ldr	r0, [pc, #312]	@ (8000ef0 <_svfiprintf_r+0x1e4>)
 8000db6:	f7ff fa2b 	bl	8000210 <memchr>
 8000dba:	9a04      	ldr	r2, [sp, #16]
 8000dbc:	b9d8      	cbnz	r0, 8000df6 <_svfiprintf_r+0xea>
 8000dbe:	06d0      	lsls	r0, r2, #27
 8000dc0:	bf44      	itt	mi
 8000dc2:	2320      	movmi	r3, #32
 8000dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dc8:	0711      	lsls	r1, r2, #28
 8000dca:	bf44      	itt	mi
 8000dcc:	232b      	movmi	r3, #43	@ 0x2b
 8000dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dd8:	d015      	beq.n	8000e06 <_svfiprintf_r+0xfa>
 8000dda:	9a07      	ldr	r2, [sp, #28]
 8000ddc:	4654      	mov	r4, sl
 8000dde:	2000      	movs	r0, #0
 8000de0:	f04f 0c0a 	mov.w	ip, #10
 8000de4:	4621      	mov	r1, r4
 8000de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dea:	3b30      	subs	r3, #48	@ 0x30
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	d94b      	bls.n	8000e88 <_svfiprintf_r+0x17c>
 8000df0:	b1b0      	cbz	r0, 8000e20 <_svfiprintf_r+0x114>
 8000df2:	9207      	str	r2, [sp, #28]
 8000df4:	e014      	b.n	8000e20 <_svfiprintf_r+0x114>
 8000df6:	eba0 0308 	sub.w	r3, r0, r8
 8000dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	46a2      	mov	sl, r4
 8000e04:	e7d2      	b.n	8000dac <_svfiprintf_r+0xa0>
 8000e06:	9b03      	ldr	r3, [sp, #12]
 8000e08:	1d19      	adds	r1, r3, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	9103      	str	r1, [sp, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bfbb      	ittet	lt
 8000e12:	425b      	neglt	r3, r3
 8000e14:	f042 0202 	orrlt.w	r2, r2, #2
 8000e18:	9307      	strge	r3, [sp, #28]
 8000e1a:	9307      	strlt	r3, [sp, #28]
 8000e1c:	bfb8      	it	lt
 8000e1e:	9204      	strlt	r2, [sp, #16]
 8000e20:	7823      	ldrb	r3, [r4, #0]
 8000e22:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e24:	d10a      	bne.n	8000e3c <_svfiprintf_r+0x130>
 8000e26:	7863      	ldrb	r3, [r4, #1]
 8000e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e2a:	d132      	bne.n	8000e92 <_svfiprintf_r+0x186>
 8000e2c:	9b03      	ldr	r3, [sp, #12]
 8000e2e:	1d1a      	adds	r2, r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	9203      	str	r2, [sp, #12]
 8000e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e38:	3402      	adds	r4, #2
 8000e3a:	9305      	str	r3, [sp, #20]
 8000e3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000f00 <_svfiprintf_r+0x1f4>
 8000e40:	7821      	ldrb	r1, [r4, #0]
 8000e42:	2203      	movs	r2, #3
 8000e44:	4650      	mov	r0, sl
 8000e46:	f7ff f9e3 	bl	8000210 <memchr>
 8000e4a:	b138      	cbz	r0, 8000e5c <_svfiprintf_r+0x150>
 8000e4c:	9b04      	ldr	r3, [sp, #16]
 8000e4e:	eba0 000a 	sub.w	r0, r0, sl
 8000e52:	2240      	movs	r2, #64	@ 0x40
 8000e54:	4082      	lsls	r2, r0
 8000e56:	4313      	orrs	r3, r2
 8000e58:	3401      	adds	r4, #1
 8000e5a:	9304      	str	r3, [sp, #16]
 8000e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e60:	4824      	ldr	r0, [pc, #144]	@ (8000ef4 <_svfiprintf_r+0x1e8>)
 8000e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e66:	2206      	movs	r2, #6
 8000e68:	f7ff f9d2 	bl	8000210 <memchr>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	d036      	beq.n	8000ede <_svfiprintf_r+0x1d2>
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <_svfiprintf_r+0x1ec>)
 8000e72:	bb1b      	cbnz	r3, 8000ebc <_svfiprintf_r+0x1b0>
 8000e74:	9b03      	ldr	r3, [sp, #12]
 8000e76:	3307      	adds	r3, #7
 8000e78:	f023 0307 	bic.w	r3, r3, #7
 8000e7c:	3308      	adds	r3, #8
 8000e7e:	9303      	str	r3, [sp, #12]
 8000e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e82:	4433      	add	r3, r6
 8000e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e86:	e76a      	b.n	8000d5e <_svfiprintf_r+0x52>
 8000e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e8c:	460c      	mov	r4, r1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <_svfiprintf_r+0xd8>
 8000e92:	2300      	movs	r3, #0
 8000e94:	3401      	adds	r4, #1
 8000e96:	9305      	str	r3, [sp, #20]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 0c0a 	mov.w	ip, #10
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ea4:	3a30      	subs	r2, #48	@ 0x30
 8000ea6:	2a09      	cmp	r2, #9
 8000ea8:	d903      	bls.n	8000eb2 <_svfiprintf_r+0x1a6>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0c6      	beq.n	8000e3c <_svfiprintf_r+0x130>
 8000eae:	9105      	str	r1, [sp, #20]
 8000eb0:	e7c4      	b.n	8000e3c <_svfiprintf_r+0x130>
 8000eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e7f0      	b.n	8000e9e <_svfiprintf_r+0x192>
 8000ebc:	ab03      	add	r3, sp, #12
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <_svfiprintf_r+0x1f0>)
 8000ec4:	a904      	add	r1, sp, #16
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	f3af 8000 	nop.w
 8000ecc:	1c42      	adds	r2, r0, #1
 8000ece:	4606      	mov	r6, r0
 8000ed0:	d1d6      	bne.n	8000e80 <_svfiprintf_r+0x174>
 8000ed2:	89ab      	ldrh	r3, [r5, #12]
 8000ed4:	065b      	lsls	r3, r3, #25
 8000ed6:	f53f af2d 	bmi.w	8000d34 <_svfiprintf_r+0x28>
 8000eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000edc:	e72c      	b.n	8000d38 <_svfiprintf_r+0x2c>
 8000ede:	ab03      	add	r3, sp, #12
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	462a      	mov	r2, r5
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <_svfiprintf_r+0x1f0>)
 8000ee6:	a904      	add	r1, sp, #16
 8000ee8:	4638      	mov	r0, r7
 8000eea:	f000 f879 	bl	8000fe0 <_printf_i>
 8000eee:	e7ed      	b.n	8000ecc <_svfiprintf_r+0x1c0>
 8000ef0:	0800154b 	.word	0x0800154b
 8000ef4:	08001555 	.word	0x08001555
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	08000c55 	.word	0x08000c55
 8000f00:	08001551 	.word	0x08001551

08000f04 <_printf_common>:
 8000f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f08:	4616      	mov	r6, r2
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	688a      	ldr	r2, [r1, #8]
 8000f0e:	690b      	ldr	r3, [r1, #16]
 8000f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f14:	4293      	cmp	r3, r2
 8000f16:	bfb8      	it	lt
 8000f18:	4613      	movlt	r3, r2
 8000f1a:	6033      	str	r3, [r6, #0]
 8000f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f20:	4607      	mov	r7, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	b10a      	cbz	r2, 8000f2a <_printf_common+0x26>
 8000f26:	3301      	adds	r3, #1
 8000f28:	6033      	str	r3, [r6, #0]
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	0699      	lsls	r1, r3, #26
 8000f2e:	bf42      	ittt	mi
 8000f30:	6833      	ldrmi	r3, [r6, #0]
 8000f32:	3302      	addmi	r3, #2
 8000f34:	6033      	strmi	r3, [r6, #0]
 8000f36:	6825      	ldr	r5, [r4, #0]
 8000f38:	f015 0506 	ands.w	r5, r5, #6
 8000f3c:	d106      	bne.n	8000f4c <_printf_common+0x48>
 8000f3e:	f104 0a19 	add.w	sl, r4, #25
 8000f42:	68e3      	ldr	r3, [r4, #12]
 8000f44:	6832      	ldr	r2, [r6, #0]
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	42ab      	cmp	r3, r5
 8000f4a:	dc26      	bgt.n	8000f9a <_printf_common+0x96>
 8000f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	3b00      	subs	r3, #0
 8000f54:	bf18      	it	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	0692      	lsls	r2, r2, #26
 8000f5a:	d42b      	bmi.n	8000fb4 <_printf_common+0xb0>
 8000f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f60:	4641      	mov	r1, r8
 8000f62:	4638      	mov	r0, r7
 8000f64:	47c8      	blx	r9
 8000f66:	3001      	adds	r0, #1
 8000f68:	d01e      	beq.n	8000fa8 <_printf_common+0xa4>
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	6922      	ldr	r2, [r4, #16]
 8000f6e:	f003 0306 	and.w	r3, r3, #6
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf02      	ittt	eq
 8000f76:	68e5      	ldreq	r5, [r4, #12]
 8000f78:	6833      	ldreq	r3, [r6, #0]
 8000f7a:	1aed      	subeq	r5, r5, r3
 8000f7c:	68a3      	ldr	r3, [r4, #8]
 8000f7e:	bf0c      	ite	eq
 8000f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f84:	2500      	movne	r5, #0
 8000f86:	4293      	cmp	r3, r2
 8000f88:	bfc4      	itt	gt
 8000f8a:	1a9b      	subgt	r3, r3, r2
 8000f8c:	18ed      	addgt	r5, r5, r3
 8000f8e:	2600      	movs	r6, #0
 8000f90:	341a      	adds	r4, #26
 8000f92:	42b5      	cmp	r5, r6
 8000f94:	d11a      	bne.n	8000fcc <_printf_common+0xc8>
 8000f96:	2000      	movs	r0, #0
 8000f98:	e008      	b.n	8000fac <_printf_common+0xa8>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	4641      	mov	r1, r8
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	47c8      	blx	r9
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d103      	bne.n	8000fb0 <_printf_common+0xac>
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb0:	3501      	adds	r5, #1
 8000fb2:	e7c6      	b.n	8000f42 <_printf_common+0x3e>
 8000fb4:	18e1      	adds	r1, r4, r3
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	2030      	movs	r0, #48	@ 0x30
 8000fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fbe:	4422      	add	r2, r4
 8000fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fc8:	3302      	adds	r3, #2
 8000fca:	e7c7      	b.n	8000f5c <_printf_common+0x58>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	4622      	mov	r2, r4
 8000fd0:	4641      	mov	r1, r8
 8000fd2:	4638      	mov	r0, r7
 8000fd4:	47c8      	blx	r9
 8000fd6:	3001      	adds	r0, #1
 8000fd8:	d0e6      	beq.n	8000fa8 <_printf_common+0xa4>
 8000fda:	3601      	adds	r6, #1
 8000fdc:	e7d9      	b.n	8000f92 <_printf_common+0x8e>
	...

08000fe0 <_printf_i>:
 8000fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	7e0f      	ldrb	r7, [r1, #24]
 8000fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fe8:	2f78      	cmp	r7, #120	@ 0x78
 8000fea:	4691      	mov	r9, r2
 8000fec:	4680      	mov	r8, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	469a      	mov	sl, r3
 8000ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ff6:	d807      	bhi.n	8001008 <_printf_i+0x28>
 8000ff8:	2f62      	cmp	r7, #98	@ 0x62
 8000ffa:	d80a      	bhi.n	8001012 <_printf_i+0x32>
 8000ffc:	2f00      	cmp	r7, #0
 8000ffe:	f000 80d2 	beq.w	80011a6 <_printf_i+0x1c6>
 8001002:	2f58      	cmp	r7, #88	@ 0x58
 8001004:	f000 80b9 	beq.w	800117a <_printf_i+0x19a>
 8001008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800100c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001010:	e03a      	b.n	8001088 <_printf_i+0xa8>
 8001012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001016:	2b15      	cmp	r3, #21
 8001018:	d8f6      	bhi.n	8001008 <_printf_i+0x28>
 800101a:	a101      	add	r1, pc, #4	@ (adr r1, 8001020 <_printf_i+0x40>)
 800101c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001020:	08001079 	.word	0x08001079
 8001024:	0800108d 	.word	0x0800108d
 8001028:	08001009 	.word	0x08001009
 800102c:	08001009 	.word	0x08001009
 8001030:	08001009 	.word	0x08001009
 8001034:	08001009 	.word	0x08001009
 8001038:	0800108d 	.word	0x0800108d
 800103c:	08001009 	.word	0x08001009
 8001040:	08001009 	.word	0x08001009
 8001044:	08001009 	.word	0x08001009
 8001048:	08001009 	.word	0x08001009
 800104c:	0800118d 	.word	0x0800118d
 8001050:	080010b7 	.word	0x080010b7
 8001054:	08001147 	.word	0x08001147
 8001058:	08001009 	.word	0x08001009
 800105c:	08001009 	.word	0x08001009
 8001060:	080011af 	.word	0x080011af
 8001064:	08001009 	.word	0x08001009
 8001068:	080010b7 	.word	0x080010b7
 800106c:	08001009 	.word	0x08001009
 8001070:	08001009 	.word	0x08001009
 8001074:	0800114f 	.word	0x0800114f
 8001078:	6833      	ldr	r3, [r6, #0]
 800107a:	1d1a      	adds	r2, r3, #4
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6032      	str	r2, [r6, #0]
 8001080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001088:	2301      	movs	r3, #1
 800108a:	e09d      	b.n	80011c8 <_printf_i+0x1e8>
 800108c:	6833      	ldr	r3, [r6, #0]
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	1d19      	adds	r1, r3, #4
 8001092:	6031      	str	r1, [r6, #0]
 8001094:	0606      	lsls	r6, r0, #24
 8001096:	d501      	bpl.n	800109c <_printf_i+0xbc>
 8001098:	681d      	ldr	r5, [r3, #0]
 800109a:	e003      	b.n	80010a4 <_printf_i+0xc4>
 800109c:	0645      	lsls	r5, r0, #25
 800109e:	d5fb      	bpl.n	8001098 <_printf_i+0xb8>
 80010a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010a4:	2d00      	cmp	r5, #0
 80010a6:	da03      	bge.n	80010b0 <_printf_i+0xd0>
 80010a8:	232d      	movs	r3, #45	@ 0x2d
 80010aa:	426d      	negs	r5, r5
 80010ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010b0:	4859      	ldr	r0, [pc, #356]	@ (8001218 <_printf_i+0x238>)
 80010b2:	230a      	movs	r3, #10
 80010b4:	e011      	b.n	80010da <_printf_i+0xfa>
 80010b6:	6821      	ldr	r1, [r4, #0]
 80010b8:	6833      	ldr	r3, [r6, #0]
 80010ba:	0608      	lsls	r0, r1, #24
 80010bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80010c0:	d402      	bmi.n	80010c8 <_printf_i+0xe8>
 80010c2:	0649      	lsls	r1, r1, #25
 80010c4:	bf48      	it	mi
 80010c6:	b2ad      	uxthmi	r5, r5
 80010c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80010ca:	4853      	ldr	r0, [pc, #332]	@ (8001218 <_printf_i+0x238>)
 80010cc:	6033      	str	r3, [r6, #0]
 80010ce:	bf14      	ite	ne
 80010d0:	230a      	movne	r3, #10
 80010d2:	2308      	moveq	r3, #8
 80010d4:	2100      	movs	r1, #0
 80010d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010da:	6866      	ldr	r6, [r4, #4]
 80010dc:	60a6      	str	r6, [r4, #8]
 80010de:	2e00      	cmp	r6, #0
 80010e0:	bfa2      	ittt	ge
 80010e2:	6821      	ldrge	r1, [r4, #0]
 80010e4:	f021 0104 	bicge.w	r1, r1, #4
 80010e8:	6021      	strge	r1, [r4, #0]
 80010ea:	b90d      	cbnz	r5, 80010f0 <_printf_i+0x110>
 80010ec:	2e00      	cmp	r6, #0
 80010ee:	d04b      	beq.n	8001188 <_printf_i+0x1a8>
 80010f0:	4616      	mov	r6, r2
 80010f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80010f6:	fb03 5711 	mls	r7, r3, r1, r5
 80010fa:	5dc7      	ldrb	r7, [r0, r7]
 80010fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001100:	462f      	mov	r7, r5
 8001102:	42bb      	cmp	r3, r7
 8001104:	460d      	mov	r5, r1
 8001106:	d9f4      	bls.n	80010f2 <_printf_i+0x112>
 8001108:	2b08      	cmp	r3, #8
 800110a:	d10b      	bne.n	8001124 <_printf_i+0x144>
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	07df      	lsls	r7, r3, #31
 8001110:	d508      	bpl.n	8001124 <_printf_i+0x144>
 8001112:	6923      	ldr	r3, [r4, #16]
 8001114:	6861      	ldr	r1, [r4, #4]
 8001116:	4299      	cmp	r1, r3
 8001118:	bfde      	ittt	le
 800111a:	2330      	movle	r3, #48	@ 0x30
 800111c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001124:	1b92      	subs	r2, r2, r6
 8001126:	6122      	str	r2, [r4, #16]
 8001128:	f8cd a000 	str.w	sl, [sp]
 800112c:	464b      	mov	r3, r9
 800112e:	aa03      	add	r2, sp, #12
 8001130:	4621      	mov	r1, r4
 8001132:	4640      	mov	r0, r8
 8001134:	f7ff fee6 	bl	8000f04 <_printf_common>
 8001138:	3001      	adds	r0, #1
 800113a:	d14a      	bne.n	80011d2 <_printf_i+0x1f2>
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	b004      	add	sp, #16
 8001142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6023      	str	r3, [r4, #0]
 800114e:	4833      	ldr	r0, [pc, #204]	@ (800121c <_printf_i+0x23c>)
 8001150:	2778      	movs	r7, #120	@ 0x78
 8001152:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	6831      	ldr	r1, [r6, #0]
 800115a:	061f      	lsls	r7, r3, #24
 800115c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001160:	d402      	bmi.n	8001168 <_printf_i+0x188>
 8001162:	065f      	lsls	r7, r3, #25
 8001164:	bf48      	it	mi
 8001166:	b2ad      	uxthmi	r5, r5
 8001168:	6031      	str	r1, [r6, #0]
 800116a:	07d9      	lsls	r1, r3, #31
 800116c:	bf44      	itt	mi
 800116e:	f043 0320 	orrmi.w	r3, r3, #32
 8001172:	6023      	strmi	r3, [r4, #0]
 8001174:	b11d      	cbz	r5, 800117e <_printf_i+0x19e>
 8001176:	2310      	movs	r3, #16
 8001178:	e7ac      	b.n	80010d4 <_printf_i+0xf4>
 800117a:	4827      	ldr	r0, [pc, #156]	@ (8001218 <_printf_i+0x238>)
 800117c:	e7e9      	b.n	8001152 <_printf_i+0x172>
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	f023 0320 	bic.w	r3, r3, #32
 8001184:	6023      	str	r3, [r4, #0]
 8001186:	e7f6      	b.n	8001176 <_printf_i+0x196>
 8001188:	4616      	mov	r6, r2
 800118a:	e7bd      	b.n	8001108 <_printf_i+0x128>
 800118c:	6833      	ldr	r3, [r6, #0]
 800118e:	6825      	ldr	r5, [r4, #0]
 8001190:	6961      	ldr	r1, [r4, #20]
 8001192:	1d18      	adds	r0, r3, #4
 8001194:	6030      	str	r0, [r6, #0]
 8001196:	062e      	lsls	r6, r5, #24
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	d501      	bpl.n	80011a0 <_printf_i+0x1c0>
 800119c:	6019      	str	r1, [r3, #0]
 800119e:	e002      	b.n	80011a6 <_printf_i+0x1c6>
 80011a0:	0668      	lsls	r0, r5, #25
 80011a2:	d5fb      	bpl.n	800119c <_printf_i+0x1bc>
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	6123      	str	r3, [r4, #16]
 80011aa:	4616      	mov	r6, r2
 80011ac:	e7bc      	b.n	8001128 <_printf_i+0x148>
 80011ae:	6833      	ldr	r3, [r6, #0]
 80011b0:	1d1a      	adds	r2, r3, #4
 80011b2:	6032      	str	r2, [r6, #0]
 80011b4:	681e      	ldr	r6, [r3, #0]
 80011b6:	6862      	ldr	r2, [r4, #4]
 80011b8:	2100      	movs	r1, #0
 80011ba:	4630      	mov	r0, r6
 80011bc:	f7ff f828 	bl	8000210 <memchr>
 80011c0:	b108      	cbz	r0, 80011c6 <_printf_i+0x1e6>
 80011c2:	1b80      	subs	r0, r0, r6
 80011c4:	6060      	str	r0, [r4, #4]
 80011c6:	6863      	ldr	r3, [r4, #4]
 80011c8:	6123      	str	r3, [r4, #16]
 80011ca:	2300      	movs	r3, #0
 80011cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011d0:	e7aa      	b.n	8001128 <_printf_i+0x148>
 80011d2:	6923      	ldr	r3, [r4, #16]
 80011d4:	4632      	mov	r2, r6
 80011d6:	4649      	mov	r1, r9
 80011d8:	4640      	mov	r0, r8
 80011da:	47d0      	blx	sl
 80011dc:	3001      	adds	r0, #1
 80011de:	d0ad      	beq.n	800113c <_printf_i+0x15c>
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	079b      	lsls	r3, r3, #30
 80011e4:	d413      	bmi.n	800120e <_printf_i+0x22e>
 80011e6:	68e0      	ldr	r0, [r4, #12]
 80011e8:	9b03      	ldr	r3, [sp, #12]
 80011ea:	4298      	cmp	r0, r3
 80011ec:	bfb8      	it	lt
 80011ee:	4618      	movlt	r0, r3
 80011f0:	e7a6      	b.n	8001140 <_printf_i+0x160>
 80011f2:	2301      	movs	r3, #1
 80011f4:	4632      	mov	r2, r6
 80011f6:	4649      	mov	r1, r9
 80011f8:	4640      	mov	r0, r8
 80011fa:	47d0      	blx	sl
 80011fc:	3001      	adds	r0, #1
 80011fe:	d09d      	beq.n	800113c <_printf_i+0x15c>
 8001200:	3501      	adds	r5, #1
 8001202:	68e3      	ldr	r3, [r4, #12]
 8001204:	9903      	ldr	r1, [sp, #12]
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	42ab      	cmp	r3, r5
 800120a:	dcf2      	bgt.n	80011f2 <_printf_i+0x212>
 800120c:	e7eb      	b.n	80011e6 <_printf_i+0x206>
 800120e:	2500      	movs	r5, #0
 8001210:	f104 0619 	add.w	r6, r4, #25
 8001214:	e7f5      	b.n	8001202 <_printf_i+0x222>
 8001216:	bf00      	nop
 8001218:	0800155c 	.word	0x0800155c
 800121c:	0800156d 	.word	0x0800156d

08001220 <memmove>:
 8001220:	4288      	cmp	r0, r1
 8001222:	b510      	push	{r4, lr}
 8001224:	eb01 0402 	add.w	r4, r1, r2
 8001228:	d902      	bls.n	8001230 <memmove+0x10>
 800122a:	4284      	cmp	r4, r0
 800122c:	4623      	mov	r3, r4
 800122e:	d807      	bhi.n	8001240 <memmove+0x20>
 8001230:	1e43      	subs	r3, r0, #1
 8001232:	42a1      	cmp	r1, r4
 8001234:	d008      	beq.n	8001248 <memmove+0x28>
 8001236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800123a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800123e:	e7f8      	b.n	8001232 <memmove+0x12>
 8001240:	4402      	add	r2, r0
 8001242:	4601      	mov	r1, r0
 8001244:	428a      	cmp	r2, r1
 8001246:	d100      	bne.n	800124a <memmove+0x2a>
 8001248:	bd10      	pop	{r4, pc}
 800124a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800124e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001252:	e7f7      	b.n	8001244 <memmove+0x24>

08001254 <_sbrk_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4d06      	ldr	r5, [pc, #24]	@ (8001270 <_sbrk_r+0x1c>)
 8001258:	2300      	movs	r3, #0
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	602b      	str	r3, [r5, #0]
 8001260:	f7ff fa82 	bl	8000768 <_sbrk>
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	d102      	bne.n	800126e <_sbrk_r+0x1a>
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	b103      	cbz	r3, 800126e <_sbrk_r+0x1a>
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	200001bc 	.word	0x200001bc

08001274 <memcpy>:
 8001274:	440a      	add	r2, r1
 8001276:	4291      	cmp	r1, r2
 8001278:	f100 33ff 	add.w	r3, r0, #4294967295
 800127c:	d100      	bne.n	8001280 <memcpy+0xc>
 800127e:	4770      	bx	lr
 8001280:	b510      	push	{r4, lr}
 8001282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800128a:	4291      	cmp	r1, r2
 800128c:	d1f9      	bne.n	8001282 <memcpy+0xe>
 800128e:	bd10      	pop	{r4, pc}

08001290 <_realloc_r>:
 8001290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001294:	4680      	mov	r8, r0
 8001296:	4615      	mov	r5, r2
 8001298:	460c      	mov	r4, r1
 800129a:	b921      	cbnz	r1, 80012a6 <_realloc_r+0x16>
 800129c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012a0:	4611      	mov	r1, r2
 80012a2:	f7ff bc4b 	b.w	8000b3c <_malloc_r>
 80012a6:	b92a      	cbnz	r2, 80012b4 <_realloc_r+0x24>
 80012a8:	f7ff fbdc 	bl	8000a64 <_free_r>
 80012ac:	2400      	movs	r4, #0
 80012ae:	4620      	mov	r0, r4
 80012b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b4:	f000 f81a 	bl	80012ec <_malloc_usable_size_r>
 80012b8:	4285      	cmp	r5, r0
 80012ba:	4606      	mov	r6, r0
 80012bc:	d802      	bhi.n	80012c4 <_realloc_r+0x34>
 80012be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80012c2:	d8f4      	bhi.n	80012ae <_realloc_r+0x1e>
 80012c4:	4629      	mov	r1, r5
 80012c6:	4640      	mov	r0, r8
 80012c8:	f7ff fc38 	bl	8000b3c <_malloc_r>
 80012cc:	4607      	mov	r7, r0
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d0ec      	beq.n	80012ac <_realloc_r+0x1c>
 80012d2:	42b5      	cmp	r5, r6
 80012d4:	462a      	mov	r2, r5
 80012d6:	4621      	mov	r1, r4
 80012d8:	bf28      	it	cs
 80012da:	4632      	movcs	r2, r6
 80012dc:	f7ff ffca 	bl	8001274 <memcpy>
 80012e0:	4621      	mov	r1, r4
 80012e2:	4640      	mov	r0, r8
 80012e4:	f7ff fbbe 	bl	8000a64 <_free_r>
 80012e8:	463c      	mov	r4, r7
 80012ea:	e7e0      	b.n	80012ae <_realloc_r+0x1e>

080012ec <_malloc_usable_size_r>:
 80012ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012f0:	1f18      	subs	r0, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	bfbc      	itt	lt
 80012f6:	580b      	ldrlt	r3, [r1, r0]
 80012f8:	18c0      	addlt	r0, r0, r3
 80012fa:	4770      	bx	lr

080012fc <_init>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	bf00      	nop
 8001300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001302:	bc08      	pop	{r3}
 8001304:	469e      	mov	lr, r3
 8001306:	4770      	bx	lr

08001308 <_fini>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	bf00      	nop
 800130c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130e:	bc08      	pop	{r3}
 8001310:	469e      	mov	lr, r3
 8001312:	4770      	bx	lr
